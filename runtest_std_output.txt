Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_OP, *)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = +
  NumberExprAST val = 3.000000
  BinaryExprAST op = *
    NumberExprAST val = 4.000000
    NumberExprAST val = 2.000000
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_OP, +)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_OP, *)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = +
  VariableExprAST name = a
  BinaryExprAST op = *
    VariableExprAST name = b
    VariableExprAST name = c
Token (TOKEN_EXTERN)
Token (TOKEN_IDENTIFIER, extern_a)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, extern_b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, extern_c)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
PrototypeAST extern_a (extern_b, extern_c)
Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, def_a)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, def_b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, def_c)
Token (TOKEN_RPAREN)
Token (TOKEN_IDENTIFIER, def_b)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_OP, *)
Token (TOKEN_IDENTIFIER, def_c)
Token (TOKEN_OP, -)
Token (TOKEN_NUMBER, 6.000000)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST def_a (def_b, def_c)
  BinaryExprAST op = -
    BinaryExprAST op = +
      VariableExprAST name = def_b
      BinaryExprAST op = *
        NumberExprAST val = 2.000000
        VariableExprAST name = def_c
    NumberExprAST val = 6.000000
Token (TOKEN_IDENTIFIER, def_a)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_COMMA)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = def_a
  Arg #0:
    NumberExprAST val = 2.000000
  Arg #1:
    NumberExprAST val = 4.000000
Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, cse_test)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, +)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_OP, *)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST cse_test (x)
  BinaryExprAST op = *
    BinaryExprAST op = +
      NumberExprAST val = 3.000000
      VariableExprAST name = x
    BinaryExprAST op = +
      VariableExprAST name = x
      NumberExprAST val = 3.000000
Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, ta)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_RPAREN)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_OP, *)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST ta (b, c)
  BinaryExprAST op = *
    VariableExprAST name = b
    VariableExprAST name = c
Token (TOKEN_IDENTIFIER, ta)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_COMMA)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = ta
  Arg #0:
    NumberExprAST val = 3.000000
  Arg #1:
    NumberExprAST val = 4.000000
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_ELSE)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_SEMICOLON)
IfExprAST
  CondExpr
    VariableExprAST name = a
  ThenExpr
    NumberExprAST val = 3.000000
  ElseExpr
    NumberExprAST val = 4.000000
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_OP, -)
Token (TOKEN_NUMBER, 6.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
BlockExprAST: have 2 exprs
  BinaryExprAST op = +
    NumberExprAST val = 3.000000
    NumberExprAST val = 2.000000
  BinaryExprAST op = -
    VariableExprAST name = a
    NumberExprAST val = 6.000000
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 7.000000)
Token (TOKEN_OP, -)
Token (TOKEN_NUMBER, 5.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
IfExprAST
  CondExpr
    VariableExprAST name = a
  ThenExpr
    BlockExprAST: have 1 exprs
      BinaryExprAST op = +
        NumberExprAST val = 3.000000
        NumberExprAST val = 2.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      BinaryExprAST op = -
        NumberExprAST val = 7.000000
        NumberExprAST val = 5.000000
Token (TOKEN_EOF)
; ModuleID = 'my module'

@a = internal global double 0.000000e+00
@b = internal global double 0.000000e+00
@c = internal global double 0.000000e+00
@a.1 = internal global double 0.000000e+00
@a.2 = internal global double 0.000000e+00
@a.3 = internal global double 0.000000e+00

define internal double @__toy_main() {
  %tmp.3 = load double, double* @a
  %tmp.4 = load double, double* @b
  %tmp.5 = load double, double* @c
  %tmp.6 = fmul double %tmp.4, %tmp.5
  %tmp.7 = fadd double %tmp.3, %tmp.6
  %tmp.11 = call double @def_a(double 2.000000e+00, double 4.000000e+00)
  %tmp.16 = call double @ta(double 3.000000e+00, double 4.000000e+00)
  %tmp.17 = load double, double* @a.1
  %1 = fcmp one double %tmp.17, 0.000000e+00
  br double 0.000000e+00, label %then, label %else

then:                                             ; preds = %0
  br label %endif

else:                                             ; preds = %0
  br label %endif

endif:                                            ; preds = %else, %then
  %iftmp = phi double [ 3.000000e+00, %then ], [ 4.000000e+00, %else ]
  %tmp.19 = load double, double* @a.2
  %tmp.20 = fsub double %tmp.19, 6.000000e+00
  %tmp.21 = load double, double* @a.3
  %2 = fcmp one double %tmp.21, 0.000000e+00
  br double 0.000000e+00, label %then1, label %else2

then1:                                            ; preds = %endif
  br label %endif3

else2:                                            ; preds = %endif
  br label %endif3

endif3:                                           ; preds = %else2, %then1
  %iftmp4 = phi double [ 5.000000e+00, %then1 ], [ 2.000000e+00, %else2 ]
  ret double %iftmp4
}

declare double @extern_a(double, double)

define double @def_a(double %def_b, double %def_c) {
def_a.entry:
  %tmp.8 = fmul double 2.000000e+00, %def_c
  %tmp.9 = fadd double %def_b, %tmp.8
  %tmp.10 = fsub double %tmp.9, 6.000000e+00
  ret double %tmp.10
}

define double @cse_test(double %x) {
cse_test.entry:
  %tmp.12 = fadd double 3.000000e+00, %x
  %tmp.14 = fmul double %tmp.12, %tmp.12
  ret double %tmp.14
}

define double @ta(double %b, double %c) {
ta.entry:
  %tmp.15 = fmul double %b, %c
  ret double %tmp.15
}
2.000000
>Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_OP, *)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = +
  NumberExprAST val = 3.000000
  BinaryExprAST op = *
    NumberExprAST val = 4.000000
    NumberExprAST val = 2.000000
11.000000
>Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_OP, +)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_OP, *)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = +
  VariableExprAST name = a
  BinaryExprAST op = *
    VariableExprAST name = b
    VariableExprAST name = c
0.000000
>Token (TOKEN_EXTERN)
Token (TOKEN_IDENTIFIER, extern_a)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, extern_b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, extern_c)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
PrototypeAST extern_a (extern_b, extern_c)
>Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, def_a)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, def_b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, def_c)
Token (TOKEN_RPAREN)
Token (TOKEN_IDENTIFIER, def_b)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_OP, *)
Token (TOKEN_IDENTIFIER, def_c)
Token (TOKEN_OP, -)
Token (TOKEN_NUMBER, 6.000000)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST def_a (def_b, def_c)
  BinaryExprAST op = -
    BinaryExprAST op = +
      VariableExprAST name = def_b
      BinaryExprAST op = *
        NumberExprAST val = 2.000000
        VariableExprAST name = def_c
    NumberExprAST val = 6.000000
>Token (TOKEN_IDENTIFIER, def_a)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_COMMA)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = def_a
  Arg #0:
    NumberExprAST val = 2.000000
  Arg #1:
    NumberExprAST val = 4.000000
4.000000
>Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, cse_test)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, +)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_OP, *)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST cse_test (x)
  BinaryExprAST op = *
    BinaryExprAST op = +
      NumberExprAST val = 3.000000
      VariableExprAST name = x
    BinaryExprAST op = +
      VariableExprAST name = x
      NumberExprAST val = 3.000000
>Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, ta)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_RPAREN)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_OP, *)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST ta (b, c)
  BinaryExprAST op = *
    VariableExprAST name = b
    VariableExprAST name = c
>Token (TOKEN_IDENTIFIER, ta)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_COMMA)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = ta
  Arg #0:
    NumberExprAST val = 3.000000
  Arg #1:
    NumberExprAST val = 4.000000
12.000000
>Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_ELSE)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_SEMICOLON)
IfExprAST
  CondExpr
    VariableExprAST name = a
  ThenExpr
    NumberExprAST val = 3.000000
  ElseExpr
    NumberExprAST val = 4.000000
4.000000
>Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_OP, -)
Token (TOKEN_NUMBER, 6.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
BlockExprAST: have 2 exprs
  BinaryExprAST op = +
    NumberExprAST val = 3.000000
    NumberExprAST val = 2.000000
  BinaryExprAST op = -
    VariableExprAST name = a
    NumberExprAST val = 6.000000
-6.000000
>Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, +)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 7.000000)
Token (TOKEN_OP, -)
Token (TOKEN_NUMBER, 5.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
IfExprAST
  CondExpr
    VariableExprAST name = a
  ThenExpr
    BlockExprAST: have 1 exprs
      BinaryExprAST op = +
        NumberExprAST val = 3.000000
        NumberExprAST val = 2.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      BinaryExprAST op = -
        NumberExprAST val = 7.000000
        NumberExprAST val = 5.000000
Token (TOKEN_EOF)
2.000000

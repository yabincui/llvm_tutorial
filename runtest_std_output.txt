Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 3.000000
  BinaryExprAST op = 	
    NumberExprAST val = 4.000000
    NumberExprAST val = 2.000000
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  VariableExprAST name = a
  BinaryExprAST op = 	
    VariableExprAST name = b
    VariableExprAST name = c
Token (TOKEN_EXTERN)
Token (TOKEN_IDENTIFIER, extern_a)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, extern_b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, extern_c)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
PrototypeAST extern_a (extern_b, extern_c)
Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, def_a)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, def_b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, def_c)
Token (TOKEN_RPAREN)
Token (TOKEN_IDENTIFIER, def_b)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_IDENTIFIER, def_c)
Token (TOKEN_OP, OP_SUB)
Token (TOKEN_NUMBER, 6.000000)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST def_a (def_b, def_c)
  BinaryExprAST op = 
    BinaryExprAST op = 
      VariableExprAST name = def_b
      BinaryExprAST op = 	
        NumberExprAST val = 2.000000
        VariableExprAST name = def_c
    NumberExprAST val = 6.000000
Token (TOKEN_IDENTIFIER, def_a)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_COMMA)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = def_a
  Arg #0:
    NumberExprAST val = 2.000000
  Arg #1:
    NumberExprAST val = 4.000000
Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, cse_test)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST cse_test (x)
  BinaryExprAST op = 	
    BinaryExprAST op = 
      NumberExprAST val = 3.000000
      VariableExprAST name = x
    BinaryExprAST op = 
      VariableExprAST name = x
      NumberExprAST val = 3.000000
Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, ta)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_RPAREN)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST ta (b, c)
  BinaryExprAST op = 	
    VariableExprAST name = b
    VariableExprAST name = c
Token (TOKEN_IDENTIFIER, ta)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_COMMA)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = ta
  Arg #0:
    NumberExprAST val = 3.000000
  Arg #1:
    NumberExprAST val = 4.000000
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_ELSE)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_SEMICOLON)
IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    VariableExprAST name = a
  ThenExpr #1
    NumberExprAST val = 3.000000
  ElseExpr
    NumberExprAST val = 4.000000
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_OP, OP_SUB)
Token (TOKEN_NUMBER, 6.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
BlockExprAST: have 2 exprs
  BinaryExprAST op = 
    NumberExprAST val = 3.000000
    NumberExprAST val = 2.000000
  BinaryExprAST op = 
    VariableExprAST name = a
    NumberExprAST val = 6.000000
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 7.000000)
Token (TOKEN_OP, OP_SUB)
Token (TOKEN_NUMBER, 5.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    VariableExprAST name = a
  ThenExpr #1
    BlockExprAST: have 1 exprs
      BinaryExprAST op = 
        NumberExprAST val = 3.000000
        NumberExprAST val = 2.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      BinaryExprAST op = 
        NumberExprAST val = 7.000000
        NumberExprAST val = 5.000000
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 7.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    NumberExprAST val = 1.000000
  ThenExpr #1
    BlockExprAST: have 1 exprs
      BinaryExprAST op = 
        NumberExprAST val = 4.000000
        NumberExprAST val = 1.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      BinaryExprAST op = 
        NumberExprAST val = 7.000000
        NumberExprAST val = 4.000000
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELIF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_IF)
unread Token (TOKEN_IF)
IfExprAST: have 2 CondThenExprs, have 0 ElseExpr
  CondExpr #1
    NumberExprAST val = 0.000000
  ThenExpr #1
    BlockExprAST: have 1 exprs
      NumberExprAST val = 0.000000
  CondExpr #2
    NumberExprAST val = 1.000000
  ThenExpr #2
    BlockExprAST: have 1 exprs
      NumberExprAST val = 1.000000
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELIF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELIF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
IfExprAST: have 3 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    NumberExprAST val = 0.000000
  ThenExpr #1
    BlockExprAST: have 1 exprs
      NumberExprAST val = 0.000000
  CondExpr #2
    NumberExprAST val = 1.000000
  ThenExpr #2
    BlockExprAST: have 1 exprs
      NumberExprAST val = 1.000000
  CondExpr #3
    NumberExprAST val = 2.000000
  ThenExpr #3
    BlockExprAST: have 1 exprs
      NumberExprAST val = 2.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      NumberExprAST val = 3.000000
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_RBRACE)
IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    NumberExprAST val = 0.000000
  ThenExpr #1
    BlockExprAST: have 1 exprs
      NumberExprAST val = 0.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
        CondExpr #1
          VariableExprAST name = a
        ThenExpr #1
          BlockExprAST: have 1 exprs
            NumberExprAST val = 1.000000
        ElseExpr
          BlockExprAST: have 1 exprs
            NumberExprAST val = 2.000000
Token (TOKEN_EXTERN)
Token (TOKEN_IDENTIFIER, printc)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
PrototypeAST printc (x)
Token (TOKEN_IDENTIFIER, printc)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 42.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = printc
  Arg #0:
    NumberExprAST val = 42.000000
Token (TOKEN_IDENTIFIER, printc)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 10.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = printc
  Arg #0:
    NumberExprAST val = 10.000000
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_LT)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 2.000000
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_LT)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 0.000000
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_LE)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 1.000000
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_LE)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 0.000000
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_EQ)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 1.000000
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_NE)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 2.000000
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_GT)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 0.000000
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_GE)
Token (TOKEN_NUMBER, 5.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 5.000000
Token (TOKEN_EOF)
; ModuleID = 'tmpmodule.1'

@a = internal global double 0.000000e+00
@b = internal global double 0.000000e+00
@c = internal global double 0.000000e+00
@a.1 = internal global double 0.000000e+00
@a.2 = internal global double 0.000000e+00
@a.3 = internal global double 0.000000e+00
@a.4 = internal global double 0.000000e+00

define internal double @__toy_main() {
  %tmp.3 = load double, double* @a
  %tmp.4 = load double, double* @b
  %tmp.5 = load double, double* @c
  %tmp.6 = fmul double %tmp.4, %tmp.5
  %tmp.7 = fadd double %tmp.3, %tmp.6
  %tmp.11 = call double @def_a(double 2.000000e+00, double 4.000000e+00)
  %tmp.16 = call double @ta(double 3.000000e+00, double 4.000000e+00)
  %tmp.17 = load double, double* @a.1
  %1 = fcmp one double %tmp.17, 0.000000e+00
  br i1 %1, label %then0, label %else

then0:                                            ; preds = %0
  br label %endif

else:                                             ; preds = %0
  br label %endif

endif:                                            ; preds = %else, %then0
  %iftmp = phi double [ 3.000000e+00, %then0 ], [ 4.000000e+00, %else ]
  %tmp.19 = load double, double* @a.2
  %tmp.20 = fsub double %tmp.19, 6.000000e+00
  %tmp.21 = load double, double* @a.3
  %2 = fcmp one double %tmp.21, 0.000000e+00
  br i1 %2, label %then01, label %else2

then01:                                           ; preds = %endif
  br label %endif3

else2:                                            ; preds = %endif
  br label %endif3

endif3:                                           ; preds = %else2, %then01
  %iftmp4 = phi double [ 5.000000e+00, %then01 ], [ 2.000000e+00, %else2 ]
  br i1 true, label %then05, label %else6

then05:                                           ; preds = %endif3
  br label %endif7

else6:                                            ; preds = %endif3
  br label %endif7

endif7:                                           ; preds = %else6, %then05
  %iftmp8 = phi double [ 5.000000e+00, %then05 ], [ 1.100000e+01, %else6 ]
  br i1 false, label %then09, label %cond1

then09:                                           ; preds = %endif7
  br label %endif11

cond1:                                            ; preds = %endif7
  br i1 true, label %then1, label %else10

then1:                                            ; preds = %cond1
  br label %endif11

else10:                                           ; preds = %cond1
  br label %endif11

endif11:                                          ; preds = %else10, %then1, %then09
  %iftmp12 = phi double [ 0.000000e+00, %then09 ], [ 1.000000e+00, %then1 ], [ 0.000000e+00, %else10 ]
  br i1 false, label %then013, label %cond114

then013:                                          ; preds = %endif11
  br label %endif17

cond114:                                          ; preds = %endif11
  br i1 true, label %then115, label %cond2

then115:                                          ; preds = %cond114
  br label %endif17

cond2:                                            ; preds = %cond114
  br i1 true, label %then2, label %else16

then2:                                            ; preds = %cond2
  br label %endif17

else16:                                           ; preds = %cond2
  br label %endif17

endif17:                                          ; preds = %else16, %then2, %then115, %then013
  %iftmp18 = phi double [ 0.000000e+00, %then013 ], [ 1.000000e+00, %then115 ], [ 2.000000e+00, %then2 ], [ 3.000000e+00, %else16 ]
  br i1 false, label %then019, label %else20

then019:                                          ; preds = %endif17
  br label %endif21

else20:                                           ; preds = %endif17
  %tmp.26 = load double, double* @a.4
  %3 = fcmp one double %tmp.26, 0.000000e+00
  br i1 %3, label %then022, label %else23

endif21:                                          ; preds = %endif24, %then019
  %iftmp26 = phi double [ 0.000000e+00, %then019 ], [ %iftmp25, %endif24 ]
  %tmp.27 = call double @printc(double 4.200000e+01)
  %tmp.28 = call double @printc(double 1.000000e+01)
  ret double 0.000000e+00

then022:                                          ; preds = %else20
  br label %endif24

else23:                                           ; preds = %else20
  br label %endif24

endif24:                                          ; preds = %else23, %then022
  %iftmp25 = phi double [ 1.000000e+00, %then022 ], [ 2.000000e+00, %else23 ]
  br label %endif21
}

declare double @extern_a(double, double)

define double @def_a(double %def_b, double %def_c) {
def_a.entry:
  %tmp.8 = fmul double 2.000000e+00, %def_c
  %tmp.9 = fadd double %def_b, %tmp.8
  %tmp.10 = fsub double %tmp.9, 6.000000e+00
  ret double %tmp.10
}

define double @cse_test(double %x) {
cse_test.entry:
  %tmp.12 = fadd double 3.000000e+00, %x
  %tmp.13 = fadd double %x, 3.000000e+00
  %tmp.14 = fmul double %tmp.12, %tmp.13
  ret double %tmp.14
}

define double @ta(double %b, double %c) {
ta.entry:
  %tmp.15 = fmul double %b, %c
  ret double %tmp.15
}

declare double @printc(double)
*
0.000000
>Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 3.000000
  BinaryExprAST op = 	
    NumberExprAST val = 4.000000
    NumberExprAST val = 2.000000
; ModuleID = 'tmpmodule.1'

define internal double @__toy_main() {
  ret double 1.100000e+01
}
11.000000
>Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  VariableExprAST name = a
  BinaryExprAST op = 	
    VariableExprAST name = b
    VariableExprAST name = c
; ModuleID = 'tmpmodule.2'

@a = internal global double 0.000000e+00
@b = internal global double 0.000000e+00
@c = internal global double 0.000000e+00

define internal double @__toy_main() {
  %tmp.3 = load double, double* @a
  %tmp.4 = load double, double* @b
  %tmp.5 = load double, double* @c
  %tmp.6 = fmul double %tmp.4, %tmp.5
  %tmp.7 = fadd double %tmp.3, %tmp.6
  ret double %tmp.7
}
0.000000
>Token (TOKEN_EXTERN)
Token (TOKEN_IDENTIFIER, extern_a)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, extern_b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, extern_c)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
PrototypeAST extern_a (extern_b, extern_c)
; ModuleID = 'tmpmodule.3'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 0.000000e+00
}

declare double @extern_a(double, double)
0.000000
>Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, def_a)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, def_b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, def_c)
Token (TOKEN_RPAREN)
Token (TOKEN_IDENTIFIER, def_b)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_IDENTIFIER, def_c)
Token (TOKEN_OP, OP_SUB)
Token (TOKEN_NUMBER, 6.000000)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST def_a (def_b, def_c)
  BinaryExprAST op = 
    BinaryExprAST op = 
      VariableExprAST name = def_b
      BinaryExprAST op = 	
        NumberExprAST val = 2.000000
        VariableExprAST name = def_c
    NumberExprAST val = 6.000000
; ModuleID = 'tmpmodule.4'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 0.000000e+00
}

declare double @extern_a(double, double)

define double @def_a(double %def_b, double %def_c) {
def_a.entry:
  %tmp.8 = fmul double 2.000000e+00, %def_c
  %tmp.9 = fadd double %def_b, %tmp.8
  %tmp.10 = fsub double %tmp.9, 6.000000e+00
  ret double %tmp.10
}
0.000000
>Token (TOKEN_IDENTIFIER, def_a)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_COMMA)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = def_a
  Arg #0:
    NumberExprAST val = 2.000000
  Arg #1:
    NumberExprAST val = 4.000000
; ModuleID = 'tmpmodule.5'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  %tmp.11 = call double @def_a(double 2.000000e+00, double 4.000000e+00)
  ret double %tmp.11
}

declare double @extern_a(double, double)

declare double @def_a(double, double)
4.000000
>Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, cse_test)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST cse_test (x)
  BinaryExprAST op = 	
    BinaryExprAST op = 
      NumberExprAST val = 3.000000
      VariableExprAST name = x
    BinaryExprAST op = 
      VariableExprAST name = x
      NumberExprAST val = 3.000000
; ModuleID = 'tmpmodule.6'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 0.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

define double @cse_test(double %x) {
cse_test.entry:
  %tmp.12 = fadd double 3.000000e+00, %x
  %tmp.13 = fadd double %x, 3.000000e+00
  %tmp.14 = fmul double %tmp.12, %tmp.13
  ret double %tmp.14
}
0.000000
>Token (TOKEN_DEF)
Token (TOKEN_IDENTIFIER, ta)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_COMMA)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_RPAREN)
Token (TOKEN_IDENTIFIER, b)
Token (TOKEN_OP, OP_MUL)
Token (TOKEN_IDENTIFIER, c)
Token (TOKEN_SEMICOLON)
FunctionAST
  PrototypeAST ta (b, c)
  BinaryExprAST op = 	
    VariableExprAST name = b
    VariableExprAST name = c
; ModuleID = 'tmpmodule.7'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 0.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

define double @ta(double %b, double %c) {
ta.entry:
  %tmp.15 = fmul double %b, %c
  ret double %tmp.15
}
0.000000
>Token (TOKEN_IDENTIFIER, ta)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_COMMA)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = ta
  Arg #0:
    NumberExprAST val = 3.000000
  Arg #1:
    NumberExprAST val = 4.000000
; ModuleID = 'tmpmodule.8'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  %tmp.16 = call double @ta(double 3.000000e+00, double 4.000000e+00)
  ret double %tmp.16
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)
12.000000
>Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_ELSE)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_SEMICOLON)
IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    VariableExprAST name = a
  ThenExpr #1
    NumberExprAST val = 3.000000
  ElseExpr
    NumberExprAST val = 4.000000
; ModuleID = 'tmpmodule.9'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  %tmp.17 = load double, double* @a
  %1 = fcmp one double %tmp.17, 0.000000e+00
  br i1 %1, label %then0, label %else

then0:                                            ; preds = %0
  br label %endif

else:                                             ; preds = %0
  br label %endif

endif:                                            ; preds = %else, %then0
  %iftmp = phi double [ 3.000000e+00, %then0 ], [ 4.000000e+00, %else ]
  ret double %iftmp
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)
4.000000
>Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_OP, OP_SUB)
Token (TOKEN_NUMBER, 6.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
BlockExprAST: have 2 exprs
  BinaryExprAST op = 
    NumberExprAST val = 3.000000
    NumberExprAST val = 2.000000
  BinaryExprAST op = 
    VariableExprAST name = a
    NumberExprAST val = 6.000000
; ModuleID = 'tmpmodule.10'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  %tmp.19 = load double, double* @a
  %tmp.20 = fsub double %tmp.19, 6.000000e+00
  ret double %tmp.20
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)
-6.000000
>Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 7.000000)
Token (TOKEN_OP, OP_SUB)
Token (TOKEN_NUMBER, 5.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    VariableExprAST name = a
  ThenExpr #1
    BlockExprAST: have 1 exprs
      BinaryExprAST op = 
        NumberExprAST val = 3.000000
        NumberExprAST val = 2.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      BinaryExprAST op = 
        NumberExprAST val = 7.000000
        NumberExprAST val = 5.000000
; ModuleID = 'tmpmodule.11'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  %tmp.21 = load double, double* @a
  %1 = fcmp one double %tmp.21, 0.000000e+00
  br i1 %1, label %then0, label %else

then0:                                            ; preds = %0
  br label %endif

else:                                             ; preds = %0
  br label %endif

endif:                                            ; preds = %else, %then0
  %iftmp = phi double [ 5.000000e+00, %then0 ], [ 2.000000e+00, %else ]
  ret double %iftmp
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)
2.000000
>Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 7.000000)
Token (TOKEN_OP, OP_ADD)
Token (TOKEN_NUMBER, 4.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    NumberExprAST val = 1.000000
  ThenExpr #1
    BlockExprAST: have 1 exprs
      BinaryExprAST op = 
        NumberExprAST val = 4.000000
        NumberExprAST val = 1.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      BinaryExprAST op = 
        NumberExprAST val = 7.000000
        NumberExprAST val = 4.000000
; ModuleID = 'tmpmodule.12'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  br i1 true, label %then0, label %else

then0:                                            ; preds = %0
  br label %endif

else:                                             ; preds = %0
  br label %endif

endif:                                            ; preds = %else, %then0
  %iftmp = phi double [ 5.000000e+00, %then0 ], [ 1.100000e+01, %else ]
  ret double %iftmp
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)
5.000000
>Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELIF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_IF)
unread Token (TOKEN_IF)
IfExprAST: have 2 CondThenExprs, have 0 ElseExpr
  CondExpr #1
    NumberExprAST val = 0.000000
  ThenExpr #1
    BlockExprAST: have 1 exprs
      NumberExprAST val = 0.000000
  CondExpr #2
    NumberExprAST val = 1.000000
  ThenExpr #2
    BlockExprAST: have 1 exprs
      NumberExprAST val = 1.000000
; ModuleID = 'tmpmodule.13'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  br i1 false, label %then0, label %cond1

then0:                                            ; preds = %0
  br label %endif

cond1:                                            ; preds = %0
  br i1 true, label %then1, label %else

then1:                                            ; preds = %cond1
  br label %endif

else:                                             ; preds = %cond1
  br label %endif

endif:                                            ; preds = %else, %then1, %then0
  %iftmp = phi double [ 0.000000e+00, %then0 ], [ 1.000000e+00, %then1 ], [ 0.000000e+00, %else ]
  ret double %iftmp
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
1.000000
>Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELIF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELIF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 3.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
IfExprAST: have 3 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    NumberExprAST val = 0.000000
  ThenExpr #1
    BlockExprAST: have 1 exprs
      NumberExprAST val = 0.000000
  CondExpr #2
    NumberExprAST val = 1.000000
  ThenExpr #2
    BlockExprAST: have 1 exprs
      NumberExprAST val = 1.000000
  CondExpr #3
    NumberExprAST val = 2.000000
  ThenExpr #3
    BlockExprAST: have 1 exprs
      NumberExprAST val = 2.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      NumberExprAST val = 3.000000
; ModuleID = 'tmpmodule.14'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  br i1 false, label %then0, label %cond1

then0:                                            ; preds = %0
  br label %endif

cond1:                                            ; preds = %0
  br i1 true, label %then1, label %cond2

then1:                                            ; preds = %cond1
  br label %endif

cond2:                                            ; preds = %cond1
  br i1 true, label %then2, label %else

then2:                                            ; preds = %cond2
  br label %endif

else:                                             ; preds = %cond2
  br label %endif

endif:                                            ; preds = %else, %then2, %then1, %then0
  %iftmp = phi double [ 0.000000e+00, %then0 ], [ 1.000000e+00, %then1 ], [ 2.000000e+00, %then2 ], [ 3.000000e+00, %else ]
  ret double %iftmp
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)
1.000000
>Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_IF)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, a)
Token (TOKEN_RPAREN)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_ELSE)
Token (TOKEN_LBRACE)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
Token (TOKEN_RBRACE)
Token (TOKEN_RBRACE)
IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
  CondExpr #1
    NumberExprAST val = 0.000000
  ThenExpr #1
    BlockExprAST: have 1 exprs
      NumberExprAST val = 0.000000
  ElseExpr
    BlockExprAST: have 1 exprs
      IfExprAST: have 1 CondThenExprs, have 1 ElseExpr
        CondExpr #1
          VariableExprAST name = a
        ThenExpr #1
          BlockExprAST: have 1 exprs
            NumberExprAST val = 1.000000
        ElseExpr
          BlockExprAST: have 1 exprs
            NumberExprAST val = 2.000000
; ModuleID = 'tmpmodule.15'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  br i1 false, label %then0, label %else

then0:                                            ; preds = %0
  br label %endif

else:                                             ; preds = %0
  %tmp.26 = load double, double* @a
  %1 = fcmp one double %tmp.26, 0.000000e+00
  br i1 %1, label %then01, label %else2

endif:                                            ; preds = %endif3, %then0
  %iftmp4 = phi double [ 0.000000e+00, %then0 ], [ %iftmp, %endif3 ]
  ret double %iftmp4

then01:                                           ; preds = %else
  br label %endif3

else2:                                            ; preds = %else
  br label %endif3

endif3:                                           ; preds = %else2, %then01
  %iftmp = phi double [ 1.000000e+00, %then01 ], [ 2.000000e+00, %else2 ]
  br label %endif
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)
2.000000
>Token (TOKEN_EXTERN)
Token (TOKEN_IDENTIFIER, printc)
Token (TOKEN_LPAREN)
Token (TOKEN_IDENTIFIER, x)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
PrototypeAST printc (x)
; ModuleID = 'tmpmodule.16'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 0.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
0.000000
>Token (TOKEN_IDENTIFIER, printc)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 42.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = printc
  Arg #0:
    NumberExprAST val = 42.000000
; ModuleID = 'tmpmodule.17'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  %tmp.27 = call double @printc(double 4.200000e+01)
  ret double %tmp.27
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
*0.000000
>Token (TOKEN_IDENTIFIER, printc)
Token (TOKEN_LPAREN)
Token (TOKEN_NUMBER, 10.000000)
Token (TOKEN_RPAREN)
Token (TOKEN_SEMICOLON)
CallExprAST Callee = printc
  Arg #0:
    NumberExprAST val = 10.000000
; ModuleID = 'tmpmodule.18'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  %tmp.28 = call double @printc(double 1.000000e+01)
  ret double %tmp.28
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)

0.000000
>Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_LT)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 2.000000
; ModuleID = 'tmpmodule.19'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 1.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
1.000000
>Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_LT)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 0.000000
; ModuleID = 'tmpmodule.20'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 0.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
0.000000
>Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_LE)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 1.000000
; ModuleID = 'tmpmodule.21'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 1.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
1.000000
>Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_LE)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 0.000000
; ModuleID = 'tmpmodule.22'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 0.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
0.000000
>Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_EQ)
Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 1.000000
; ModuleID = 'tmpmodule.23'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 1.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
1.000000
>Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_NE)
Token (TOKEN_NUMBER, 2.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 2.000000
; ModuleID = 'tmpmodule.24'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 1.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
1.000000
>Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_GT)
Token (TOKEN_NUMBER, 0.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 0.000000
; ModuleID = 'tmpmodule.25'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 1.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
1.000000
>Token (TOKEN_NUMBER, 1.000000)
Token (TOKEN_OP, OP_GE)
Token (TOKEN_NUMBER, 5.000000)
Token (TOKEN_SEMICOLON)
BinaryExprAST op = 
  NumberExprAST val = 1.000000
  NumberExprAST val = 5.000000
; ModuleID = 'tmpmodule.26'

@a = external global double
@b = external global double
@c = external global double

define internal double @__toy_main() {
  ret double 0.000000e+00
}

declare double @extern_a(double, double)

declare double @def_a(double, double)

declare double @cse_test(double)

declare double @ta(double, double)

declare double @printc(double)
Token (TOKEN_EOF)
0.000000
